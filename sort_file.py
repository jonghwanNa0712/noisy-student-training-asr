keyword = [
    "DWT",
    " DWT",
    " CNN ",
    " RNN ",
    " CTC ",
    " Attention ",
    " SOTA ",
    " E2E - End-to-end ",
    " Average pooling ",
    " ReLU ",
    " self-attention ",
    " convolution ",
    " Computer Vision - CV ",
    " Convolution Subsampling ",
    " relative sinusoidal positional encoding scheme ",
    " pointwise convolution ",
    " GLU - Gated Linear Unit ",
    " temporal classification ",
    " ctc - connectionist temporal classification ",
    " hmm - hidden markov model ",
    " crf - conditional random field ",
    " time-step ",
    " vector ",
    " fine-tuning ",
    " contrastive task - contrastive learning ",
    " codebooks ",
    " logits ",
    " cosine similarity ",
    " batch ",
    " hand-labeled data sets ",
    " weak supervision ",
    " APED - Automatic Phoneme Error Detection ",
    " call ",
    " capt ",
    " deep belief network - dbn ",
    " self-attention ",
    " convolution ",
    " hmm ",
    " crf ",
    " stride ",
    " time-step ",
    " codebook ",
    " feature encoder ",
    " contrastive loss ",
    " diversity loss ",
    " temperature ",
    " transfer learning ",
    "  weak supervision ",
    " multiple-instance learning ",
    " global statistics supervision ",
    " partial supervision ",
    " self-labeling ",
    " decision-dierected learning ",
    " pseudo label ",
    "phoneme",
    " ImageNet ",
    " state-of-the-art ",
    " wer ",
    " per ",
    " ler ",
    " language model ",
    " fine-tune ",
    " downstream task ",
    " beam search ",
    " beam width ",
    " ground truth ",
    "Supervised Learning",
    "Unsupervised Learning",
    "Semi-supervised learning",
    "NST – Noisy Student Training",
    "APED - Automatic Pronunciation Error Detection",
    "Pre-training",
    "Self-training",
    "LCS - Longest Common Subsequence",
    "Encoder",
    "CALL - Computer-Assisted Language Learning",
    "CAPT – Computer-Assisted Pronunciation Training",
    "GOP – Goodness of Pronunciation",
]


def process(text):
    return text.strip().lower()


data = list(map(process, keyword))
data = sorted(data)

f = open("keyword_sorted.txt", "w")
for i in data:
    f.write(i + "\n")
